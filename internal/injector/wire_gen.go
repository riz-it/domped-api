// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package injector

import (
	"github.com/google/wire"
	"riz.it/domped/internal/config"
	"riz.it/domped/internal/delivery"
	"riz.it/domped/internal/delivery/controller"
	"riz.it/domped/internal/delivery/middleware"
	"riz.it/domped/internal/domain"
	"riz.it/domped/internal/repository"
	"riz.it/domped/internal/usecase"
	"riz.it/domped/internal/util"
)

// Injectors from app.go:

func InitializedApp() *config.App {
	configConfig := config.Get()
	app := config.NewFiber(configConfig)
	jwt := util.NewJWTUtil(configConfig)
	v := middleware.NewAuthMiddleware(jwt)
	logger := config.NewLogger(configConfig)
	db := config.NewDatabase(configConfig, logger)
	userRepository := repository.NewUser(logger)
	validate := config.NewValidator(configConfig)
	client := config.NewRedisClient(configConfig)
	email := util.NewEmailUtil(configConfig)
	authUseCase := usecase.NewAuthUseCase(db, logger, userRepository, jwt, validate, client, email)
	authController := controller.NewAuthController(authUseCase, logger)
	walletRepository := repository.NewWallet(logger)
	transactionRepository := repository.NewTransaction(logger)
	transactionUseCase := usecase.NewTransactionUseCase(db, logger, walletRepository, transactionRepository, validate, client)
	transactionController := controller.NewTransactionController(transactionUseCase, logger)
	routerConfig := delivery.NewRouter(app, v, authController, transactionController)
	configApp := config.NewApp(routerConfig, configConfig)
	return configApp
}

// app.go:

var authSet = wire.NewSet(usecase.NewAuthUseCase, controller.NewAuthController)

var userSet = wire.NewSet(repository.NewUser, wire.Bind(new(domain.UserRepository), new(*repository.UserRepository)))

var walletSet = wire.NewSet(repository.NewWallet, wire.Bind(new(domain.WalletRepository), new(*repository.WalletRepository)))

var transactionSet = wire.NewSet(repository.NewTransaction, wire.Bind(new(domain.TransactionRepository), new(*repository.TransactionRepository)), usecase.NewTransactionUseCase, controller.NewTransactionController)

var middlewareSet = wire.NewSet(middleware.NewAuthMiddleware)
